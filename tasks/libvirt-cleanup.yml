---

- name: Generate list of .tf and .cfg files to keep
  ansible.builtin.set_fact:
    files_to_keep: []

- name: Add fixed resources files to keep list
  ansible.builtin.set_fact:
    files_to_keep: "{{ files_to_keep + [ tf_config_dir + '/' + item + '.tf' ] }}"
  with_items:
    - 'provider'
    - 'networks'
    - 'pools'
    - 'volumes'
    - 'cloud_init'
    - 'coreos_ignition'

- name: Add dynamic cloud_init.cfg files to keep list
  ansible.builtin.set_fact:
    files_to_keep: "{{ files_to_keep + [ tf_config_dir + '/cloud_init_' + item.name + '.cfg' ] }}"
  with_items:
    - "{{ tf_libvirt_cloud_inits }}"

- name: Add dynamic .vms.tf files to keep list
  ansible.builtin.set_fact:
    files_to_keep: "{{ files_to_keep + [ tf_config_dir + '/' + item + '.vms.tf' ] }}"
  with_items:
    - "{{ tf_libvirt_vms_groups }}"

- name: Get the stats (including absolute paths) of the remote files
  ansible.builtin.stat:
    path: "{{ item }}"
  loop: "{{ files_to_keep }}"
  register: files_to_keep_stats

- name: Create a list of files to keep with absolute paths
  ansible.builtin.set_fact:
    files_to_keep_full_path: "{{ files_to_keep_full_path | default([]) + [ item.stat.path ] }}"
  loop: "{{ files_to_keep_stats.results }}"

- name: Generate the list of all the .tf and .cfg files
  ansible.builtin.find:
    paths: "{{ tf_config_dir }}"
    patterns: "*.tf,*.cfg"
  register: all_files

- name: Effectively delete files not to keep
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ all_files.files }}"
  when: item.path not in files_to_keep_full_path
